dnl Autoconf configure script for Ada Util
dnl Copyright (C) 2001, 2002, 2003, 2009, 2010, 2011, 2012, 2013 Stephane Carrez
dnl Written by Stephane Carrez (Stephane.Carrez@gmail.com)
dnl
dnl  Licensed under the Apache License, Version 2.0 (the "License");
dnl  you may not use this file except in compliance with the License.
dnl  You may obtain a copy of the License at
dnl
dnl     http://www.apache.org/licenses/LICENSE-2.0
dnl
dnl  Unless required by applicable law or agreed to in writing, software
dnl  distributed under the License is distributed on an "AS IS" BASIS,
dnl  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
dnl  See the License for the specific language governing permissions and
dnl  limitations under the License.
dnl 
dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/util.ads)

AC_CANONICAL_SYSTEM
dnl AM_MAINTAINER_MODE

# Current release settings
UTIL_MAJOR_VERSION=1
UTIL_MINOR_VERSION=7
UTIL_MICRO_VERSION=0
UTIL_VERSION=$UTIL_MAJOR_VERSION.$UTIL_MINOR_VERSION.$UTIL_MICRO_VERSION

AC_CHECK_PROGS(GNATMAKE, gnatmake, "")

# checking for local tools
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LN_S

# Set the version number of Ada Util
AC_SUBST(UTIL_VERSION)
AC_SUBST(UTIL_MAJOR_VERSION)
AC_SUBST(UTIL_MINOR_VERSION)
AC_SUBST(UTIL_MICRO_VERSION)

EXEC_PREFIX="$prefix"
AC_SUBST(EXEC_PREFIX)

UTIL_LIBDIR="lib"
AC_SUBST(UTIL_LIBDIR)

AC_MSG_CHECKING([specific operating system sources])
case "${target_os}" in
     linux|linux-*|solaris*|sysv-*)
	src_os='src/os-linux'
	;;

     netbsdelf*)
	src_os='src/os-linux'
	;;

     macos*|darwin*)
	src_os='src/os-linux'
	;;

     mingw32*|cygwin*)
	src_os='src/os-win32'
	;;

     *)
	src_os='src/os-none'
	;;
esac
AC_MSG_RESULT(using $src_os)
UTIL_OS_DIR=$src_os
AC_SUBST(UTIL_OS_DIR)

AC_MSG_CHECKING([specific processor support])
case "${target}" in
  ## Intel 386 machines where we don't care about the manufacturer
  i[[34567]]86-*-* | x86_* | x86-*)
    src_asm='src/asm-x86'
    ;;

  *)
    src_asm='src/asm-none'
    ;;

esac
AC_MSG_RESULT(using $src_asm)
UTIL_ASM_DIR="$src_asm"
AC_SUBST(UTIL_ASM_DIR)

##########################################
# XMLAda library
##########################################

ac_xml_ada=xmlada-config
AC_MSG_CHECKING([xmlada library])
AC_ARG_WITH(xml,
AS_HELP_STRING([--with-xmlada=], [Enable XML serialization]),
[
  ac_xml_ada=${withval}/xmlada-config
  WITH_XML_ADA="with \"${withval}\";";
  UTIL_XML_DIR='src/xml';
  UTIL_HAVE_XML='yes';
],
[
  WITH_XML_ADA='';
  UTIL_XML_DIR='src';
  UTIL_HAVE_XML='no';
])

ac_xml_version=`$ac_xml_ada --version 2>/dev/null | sed -e 's, ,-,g'`
case $ac_xml_version in
  XmlAda-3.2*)
      AC_MSG_RESULT($ac_xml_version)
      WITH_XML_ADA="with \"xmlada\";";
      UTIL_XML_DIR='src/xml';
      UTIL_XML_VERSION='3';
      UTIL_HAVE_XML='yes';
      ;;

  XmlAda-4.*|XmlAda-2013)
      AC_MSG_RESULT($ac_xml_version)
      WITH_XML_ADA="with \"xmlada\";";
      UTIL_XML_DIR='src/xml';
      UTIL_XML_VERSION='4';
      UTIL_HAVE_XML='yes';
      ;;

  *)
      AC_MSG_RESULT(no)
      WITH_XML_ADA='';
      UTIL_XML_DIR='src';
      UTIL_XML_VERSION='none';
      UTIL_HAVE_XML='no';
      ;;

esac

AC_SUBST(WITH_XML_ADA)
AC_SUBST(UTIL_XML_DIR)
AC_SUBST(UTIL_XML_VERSION)
AC_SUBST(UTIL_HAVE_XML)

##########################################
# Check to enable/disable shared library
##########################################

AC_MSG_CHECKING([shared library support])
ac_enable_shared=no
AC_ARG_ENABLE(shared,
[  --enable-shared         Enable the shared libraries (disabled)],
[case "${enableval}" in
  no|none)  ac_enable_shared=no ;;
  *)        ac_enable_shared=yes ;;
esac])dnl

AC_MSG_RESULT(${ac_enable_shared})
BUILDS_SHARED=$ac_enable_shared
AC_SUBST(BUILDS_SHARED)

##########################################
# Check for GNAT traceback in Util.Log.Loggers
##########################################

AC_MSG_CHECKING([traceback in log exceptions])
ac_enable_traceback=yes
AC_ARG_ENABLE(traceback,
[  --enable-traceback      Enable the symbolic traceback dump in logged exceptions (enabled)],
[case "${enableval}" in
  no|none)  ac_enable_traceback=no ;;
  *)        ac_enable_traceback=yes ;;
esac])dnl

AC_MSG_RESULT(${ac_enable_traceback})
UTIL_GNAT_TRACEBACK=$ac_enable_traceback
AC_SUBST(UTIL_GNAT_TRACEBACK)

##########################################
# Test framework selection: aunit or ahven
##########################################

ac_enable_aunit=yes

ac_enable_ahven=no
AC_ARG_ENABLE(ahven,
[  --enable-ahven          Enable internal Ahven support for testutil library and Ada util unit tests (disabled)],
[case "${enableval}" in
  no|none)  ac_enable_ahven= ;;
  *)        ac_enable_ahven=yes
            ac_enable_aunit=no ;;
esac])dnl

AC_ARG_ENABLE(aunit,
[  --enable-aunit          Enable AUnit support for testutil library and Ada util unit tests (enabled)],
[case "${enableval}" in
  no|none)  ac_enable_aunit=no ;;
  *)        ac_enable_aunit=yes ;;
esac])dnl

AC_MSG_CHECKING(whether AUnit support is enabled)
AC_MSG_RESULT($ac_enable_aunit)
AC_MSG_CHECKING(whether Ahven internal support is enabled)
AC_MSG_RESULT($ac_enable_ahven)

if test x$ac_enable_ahven = 'xyes' -a x$ac_enable_aunit = 'xyes'; then
   AC_MSG_ERROR(Both Ahven and AUnit testing framework are selected.  Please, choose one of them.)
fi

UTIL_XUNIT_DIR=
UTIL_AUNIT_DIR=
UTIL_AHVEN_DIR=
WITH_AUNIT=

if test x$ac_enable_aunit = 'xyes'; then
  UTIL_AUNIT_DIR=testutil/aunit
  UTIL_XUNIT_DIR='"testutil/aunit"'
  WITH_AUNIT="with \"aunit\";"
fi
if test x$ac_enable_ahven = 'xyes'; then
  UTIL_AHVEN_DIR=testutil/ahven
  case "${target_os}" in
     linux|linux-*|solaris*|sysv-*)
        UTIL_XUNIT_DIR='"testutil/ahven", "testutil/ahven/unix"'
	UTIL_AHVEN_OS_DIR="testutil/ahven/unix"
	;;

     mingw32*|cygwin*)
        UTIL_XUNIT_DIR='"testutil/ahven", "testutil/ahven/windows"'
	UTIL_AHVEN_OS_DIR="testutil/ahven/windows"
	;;

     *)
        UTIL_XUNIT_DIR='"testutil/ahven", "testutil/ahven/unix"'
	UTIL_AHVEN_OS_DIR="testutil/ahven/unix"
	;;
  esac
fi

##########################################
# Check for libcurl
##########################################

UTIL_HAVE_CURL=no
WITH_UTIL_CURL=""
UTIL_CURL_LIB=curl

AC_MSG_CHECKING([curl HTTP client support in Ada Util])
ac_enable_curl=yes
AC_ARG_ENABLE(curl,
[  --enable-curl      Enable the CURL HTTP client support in Ada Util (enabled)],
[case "${enableval}" in
  no|none)  ac_enable_curl=no ;;
  *)        ac_enable_curl=yes ;;
esac])dnl

AC_MSG_RESULT(${ac_enable_curl})
if test T$ac_enable_curl = Tyes; then
  AC_CHECK_LIB($UTIL_CURL_LIB,curl_easy_perform,[
    UTIL_HAVE_CURL=yes
    CFLAGS="$CFLAGS -DHAVE_CURL"
    WITH_UTIL_CURL="with \"util_http_curl\";";
  ])
fi

##########################################
# Check for Ada Web Server
##########################################

AC_MSG_CHECKING([AWS HTTP client support in Ada Util])
ac_enable_aws=yes
AC_ARG_ENABLE(aws,
[  --enable-aws      Enable the AWS HTTP client support in Ada Util (enabled)],
[case "${enableval}" in
  no|none)  ac_enable_aws=no ;;
  *)        ac_enable_aws=yes ;;
esac])dnl

AC_MSG_RESULT(${ac_enable_aws})

ASF_SERVER=aws
UTIL_HAVE_AWS=no
WITH_SERVER=
WITH_UTIL_AWS=
AWS_DIR=

if test T$ac_enable_aws = Tyes; then
  AC_MSG_CHECKING([Ada Web Server library (http://libre.adacore.com/libre/tools/aws/)])
  AC_ARG_WITH(aws,
  AS_HELP_STRING([--with-aws=x], [Path for the Ada Web Server library (http://libre.adacore.com/libre/tools/aws/)]),
[
  WITH_SERVER="with \"${withval}\";";
  AWS_DIR=${withval}/
],
[
  echo "with \"aws\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    AWS_DIR=
    UTIL_HAVE_AWS=no
    WITH_SERVER="";
    WITH_UTIL_AWS="";
  else
    AWS_DIR=../aws/
    UTIL_HAVE_AWS=yes
    WITH_SERVER="with \"aws\";";
  fi;
  rm -f t.gpr
])
echo "with \"${AWS_DIR}aws\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   # AC_MSG_ERROR([Ada Web Server not found in ${AWS_DIR}])
   AWS_DIR=
   WITH_SERVER="";
   WITH_UTIL_AWS="";
   UTIL_HAVE_AWS=no
   AC_MSG_RESULT(Not found)
else
   WITH_SERVER="with \"${AWS_DIR}aws\";";
   WITH_UTIL_AWS="with \"util_http_aws\";";
   UTIL_HAVE_AWS=yes
   AC_MSG_RESULT(yes ${AWS_DIR})
fi
rm -f t.gpr

fi

AC_MSG_CHECKING([for gcc bug compiling Util.Serialize.Mappers.Vector_Mappers (Bug 53737)])
version=`$GNATMAKE --version | grep GNATMAKE | sed -e 's,GNATMAKE ,,'`
case "$version" in
   4.7.0|4.7.1|4.7.2)
      AC_MSG_RESULT(yes)
      AC_MSG_WARN(Your compiler is known to fail when compiling a generic package.)
      AC_MSG_WARN(See Bug 53737: Assert_Failure on a generic package with a package as parameter)
      AC_MSG_WARN(The Util.Serialize.Mappers.Vector_Mappers and Util.Http.Rest packages are excluded.)
      UTIL_HAVE_VECTOR_MAPPERS=no
      ;;

   *)
      AC_MSG_RESULT(no)
      UTIL_HAVE_VECTOR_MAPPERS=yes
      ;;
esac

AC_SUBST(UTIL_HAVE_VECTOR_MAPPERS)
AC_SUBST(AWS_DIR)
AC_SUBST(UTIL_HAVE_AWS)
AC_SUBST(WITH_UTIL_AWS)
AC_SUBST(WITH_SERVER)

AC_SUBST(UTIL_HAVE_CURL)
AC_SUBST(WITH_UTIL_CURL)
AC_SUBST(WITH_AUNIT)
AC_SUBST(UTIL_AUNIT_DIR)
AC_SUBST(UTIL_AHVEN_DIR)
AC_SUBST(UTIL_AHVEN_OS_DIR)
AC_SUBST(UTIL_XUNIT_DIR)

AC_OUTPUT(
Makefile util.gpr util_http.gpr config.gpr testutil.gpr util_http_curl.gpr util_http_aws.gpr
distrib/testutil.gpr distrib/util.gpr distrib/util_http.gpr distrib/util_http_curl.gpr
distrib/util_http_aws.gpr
)
