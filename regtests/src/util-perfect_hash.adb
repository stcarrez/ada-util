--  Generated by gperfhash
with Util.Strings.Transforms;
with Interfaces; use Interfaces;

package body Util.Perfect_Hash is

   C : constant array (Character) of Unsigned_8 :=
     (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 2, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
      0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
      20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0, 0, 0, 0, 31,
      0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
      20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

   P : constant array (0 .. 8) of Natural :=
     (1, 2, 3, 4, 5, 6, 7, 9, 13);

   T1 : constant array (0 .. 8, Unsigned_8 range 0 .. 31) of Unsigned_16 :=
     ((54, 398, 393, 33, 16, 243, 125, 331, 154, 49, 229, 271, 138, 252, 32,
       107, 282, 38, 401, 127, 287, 15, 47, 386, 77, 164, 48, 268, 67, 373,
       106, 405),
      (277, 121, 284, 221, 268, 319, 52, 298, 446, 6, 375, 363, 158, 332,
       427, 288, 289, 374, 293, 164, 170, 16, 117, 197, 140, 165, 334, 22,
       430, 34, 237, 263),
      (201, 445, 317, 37, 452, 376, 94, 398, 117, 318, 58, 353, 43, 164, 267,
       82, 150, 175, 305, 304, 328, 430, 353, 272, 99, 440, 288, 82, 274,
       416, 309, 176),
      (228, 167, 432, 313, 192, 170, 88, 229, 88, 178, 242, 354, 207, 410,
       220, 17, 390, 157, 15, 398, 16, 340, 227, 202, 381, 313, 249, 398, 57,
       101, 212, 156),
      (276, 430, 314, 22, 188, 328, 26, 57, 338, 78, 405, 270, 2, 10, 442,
       395, 277, 17, 1, 19, 81, 368, 452, 61, 282, 400, 410, 78, 413, 291,
       236, 395),
      (113, 448, 115, 47, 40, 169, 431, 368, 200, 106, 190, 20, 279, 184,
       376, 448, 11, 261, 172, 300, 209, 368, 123, 132, 323, 299, 222, 154,
       94, 176, 447, 396),
      (38, 1, 198, 36, 413, 4, 55, 295, 408, 305, 15, 383, 330, 179, 130,
       187, 386, 35, 119, 137, 338, 375, 26, 225, 339, 139, 401, 185, 254,
       41, 211, 377),
      (193, 364, 266, 418, 82, 399, 22, 249, 15, 371, 367, 29, 402, 431, 56,
       326, 400, 109, 68, 169, 339, 416, 317, 301, 209, 135, 179, 324, 257,
       248, 94, 352),
      (113, 96, 296, 112, 370, 267, 317, 417, 381, 274, 161, 178, 248, 361,
       89, 417, 319, 441, 125, 289, 419, 44, 418, 215, 88, 37, 228, 432, 132,
       115, 283, 100));

   T2 : constant array (0 .. 8, Unsigned_8 range 0 .. 31) of Unsigned_16 :=
     ((70, 80, 89, 274, 219, 201, 194, 400, 360, 38, 232, 55, 311, 252, 351,
       362, 252, 45, 435, 302, 189, 4, 96, 274, 133, 426, 43, 196, 277, 211,
       185, 115),
      (193, 51, 164, 375, 252, 260, 50, 445, 15, 38, 66, 11, 240, 101, 24,
       28, 378, 221, 82, 62, 145, 163, 444, 363, 410, 183, 189, 372, 2, 2, 7,
       319),
      (343, 412, 189, 308, 3, 273, 11, 334, 85, 395, 445, 46, 317, 420, 150,
       271, 185, 34, 276, 390, 258, 40, 140, 61, 350, 451, 12, 364, 261, 85,
       359, 227),
      (94, 151, 144, 347, 451, 162, 150, 36, 57, 403, 326, 355, 165, 314,
       244, 61, 136, 80, 99, 106, 101, 66, 149, 250, 366, 392, 104, 98, 78,
       303, 321, 271),
      (277, 93, 103, 166, 213, 63, 41, 430, 407, 356, 119, 332, 226, 197, 2,
       429, 294, 101, 247, 324, 64, 189, 298, 301, 128, 280, 369, 447, 11,
       220, 436, 206),
      (134, 227, 252, 331, 189, 37, 326, 275, 410, 39, 406, 45, 74, 276, 184,
       436, 265, 135, 9, 21, 12, 49, 93, 329, 322, 192, 431, 434, 33, 109,
       296, 80),
      (446, 178, 48, 92, 128, 211, 48, 201, 310, 49, 144, 402, 421, 313, 244,
       280, 195, 101, 153, 53, 73, 24, 273, 64, 138, 267, 176, 43, 258, 404,
       217, 341),
      (412, 188, 96, 226, 110, 202, 41, 366, 417, 255, 41, 82, 132, 68, 11,
       240, 52, 122, 119, 445, 211, 329, 248, 222, 146, 219, 57, 286, 380,
       293, 255, 122),
      (375, 57, 255, 427, 372, 157, 390, 409, 40, 144, 118, 345, 378, 359,
       316, 97, 146, 341, 447, 60, 428, 319, 284, 75, 288, 107, 194, 142,
       108, 237, 275, 242));

   G : constant array (0 .. 452) of Unsigned_8 :=
     (10, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 11, 0, 0, 0, 53,
      0, 0, 0, 0, 0, 185, 0, 0, 0, 0, 0, 211, 136, 80, 0, 216, 86, 137, 0, 0,
      0, 83, 0, 0, 0, 35, 0, 0, 0, 0, 107, 0, 140, 0, 0, 116, 0, 0, 220, 0,
      0, 0, 0, 191, 199, 23, 0, 0, 0, 0, 0, 215, 139, 0, 122, 118, 0, 0, 0,
      0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 6, 140, 164, 0, 171, 0, 61, 125, 0, 0,
      0, 0, 49, 206, 0, 0, 154, 0, 23, 0, 0, 71, 0, 0, 59, 137, 0, 107, 46,
      0, 210, 44, 0, 0, 59, 214, 0, 0, 156, 0, 0, 38, 0, 0, 201, 0, 0, 37,
      173, 0, 0, 33, 125, 206, 0, 0, 0, 54, 0, 0, 0, 212, 0, 40, 0, 75, 0,
      25, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 181, 177, 0, 0, 143, 193, 0, 0,
      8, 0, 21, 42, 216, 0, 132, 8, 122, 20, 165, 0, 158, 81, 0, 0, 0, 197,
      134, 15, 73, 0, 117, 0, 76, 0, 0, 0, 0, 12, 0, 191, 38, 52, 166, 0,
      128, 0, 65, 8, 0, 47, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 28, 91, 0, 0,
      162, 0, 0, 0, 0, 9, 215, 63, 184, 187, 167, 0, 178, 100, 0, 0, 0, 182,
      112, 0, 0, 74, 31, 169, 141, 159, 0, 61, 0, 151, 132, 0, 194, 20, 0,
      61, 0, 0, 0, 79, 200, 88, 0, 33, 151, 42, 0, 210, 179, 77, 120, 0, 0,
      35, 0, 0, 66, 0, 0, 201, 178, 0, 0, 0, 0, 0, 117, 0, 0, 0, 186, 224,
      218, 0, 121, 0, 0, 2, 165, 6, 0, 167, 0, 184, 115, 131, 0, 0, 10, 215,
      0, 0, 72, 58, 23, 45, 0, 192, 196, 0, 146, 58, 0, 99, 88, 0, 115, 0, 0,
      0, 57, 44, 200, 0, 58, 0, 19, 4, 114, 1, 84, 3, 0, 225, 0, 211, 0, 0,
      0, 0, 0, 50, 149, 205, 5, 188, 0, 0, 208, 17, 0, 143, 110, 76, 0, 187,
      85, 0, 93, 96, 62, 0, 60, 25, 158, 108, 0, 51, 0, 0, 194, 154, 128,
      214, 101, 0, 0, 0, 0, 0, 61, 43, 190, 180, 85, 0, 217, 96, 0, 161, 56,
      68, 0, 0, 217, 92, 76, 65, 0, 173, 0, 0, 30, 0, 0, 66, 13, 151, 0, 31,
      95, 0, 0, 78, 21, 34, 161, 34, 220, 191, 0, 7, 109, 0, 217, 68, 65, 0,
      139);

   function Hash (S : String) return Natural is
      F : constant Natural := S'First - 1;
      L : constant Natural := S'Length;
      F1, F2 : Natural := 0;
      J : Unsigned_8;
   begin
      for K in P'Range loop
         exit when L < P (K);
         J  := C (S (P (K) + F));
         F1 := (F1 + Natural (T1 (K, J))) mod 453;
         F2 := (F2 + Natural (T2 (K, J))) mod 453;
      end loop;
      return (Natural (G (F1)) + Natural (G (F2))) mod 226;
   end Hash;

   --  Returns true if the string <b>S</b> is a keyword.
   function Is_Keyword (S : in String) return Boolean is
      H : constant Natural := Hash (S);
   begin
      return Keywords (H).all = Util.Strings.Transforms.To_Upper_Case (S);
   end Is_Keyword;
end Util.Perfect_Hash;
